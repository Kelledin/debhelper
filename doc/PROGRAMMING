This file documents things you should know to write a new debhelper program.

Standardization:
---------------

There are lots of debhelper commands. To make the learning curve shallower,
I want them all to behave in a standard manner:

All debhelper programs have names beginning with "dh_". This is so we don't
pollute the name space too much.

Debhelper programs should never output anything to standard output except
error messages, important warnings, and the actual commands they run that
modify files under debian/ and debian/tmp, etc (this last only if they are
passed -v, and if you output the commands, you should indent them with 1 tab). 
This is so we don't have a lot of noise output when all the debhelper commands
in a debian/rules are run, so the important stuff is clearly visible.

Debhelper programs should accept the options, -v, -i, -a, -p, --no-act, and
-P, and any long forms of these options, like --verbose . If necessary, the
options may be ignored.

If debhelper commands need config files, they should use
debian/package.filename as the name of the config file (replace filename
with whatever your command wants), and debian/filename should also be
checked for config information for the first binary package in
debian/control. Also, debhelper commands should accept the same sort of
information that appears in the config files, on their command lines, if
possible, and apply that information to the first package they act on.

Debhelper programs should never modify the debian/postinst, debian/prerm,
etc scripts, instead, they can add lines to debian/postinst.debhelper, etc. 
The autoscript() function (see below) is one easy way to do this.
dh_installdeb is an exception, it will run after the other commands and
merge these modifications into the actual postinst scripts.

There are always exceptions. Just ask me.

Introducing dh_lib and Dh_Lib.pm:
--------------------------------

dh_lib/Dh_lib.pm is the library used by all debhelper programs to parse
their arguments and set some useful variables. It's not mandatory that your
program use dh_lib/Dh_lib.pm, but it will make it a lot easier to keep it in
sync with the rest of debhelper if it does, so this is highly encouraged.
There are two versions of this library - dh_lib is a shell library, while
Dh_Lib.pm is a perl module.

Typically, you invoke dh_lib like this if your debhelper program is a shell
script:

PATH=debian:$PATH:/usr/lib/debhelper
. dh_lib

The path statement is there to make your program look first in debian/ for
dh_lib (so users can install a modified version there if necessary), then the
rest of the path, then the canonical location of dh_lib, /usr/lib/debhelper.

If you are writing a perl program instead, use Dh_lib.pm like this:

BEGIN { push @INC, "debian", "/usr/lib/debhelper" }
use Dh_Lib;
init();

The BEGIN block is there to make perl look for the module in all the right
places.

Notice the init() function in the perl version. dh_lib automatically parses
the command line and does some other initialization tasks. Dh_Lib.pm
requires you to run init() to accomplish the same task.

Argument processing:
-------------------

All debhelper programs should respond to certain arguments, such as -v, -i,
-a, and -p. To help you make this work right, dh_lib/Dh_Lib.pm handles 
argument processing.

As soon as dh_lib loads, it processes any arguments that have been passed to
your program. On the other hand, you need to call init() in Dh_Lib.pm before
it will parse arguments.

After argument processing, some global variables are used to hold the
results; program can use them later. If using dh_lib, prefix DH_ to the name
of each of these variables to get the name of the environment variable that
is set. If using Dh_lib.pm, these variables are in the %dh hash.

switch		variable	description
-v		VERBOSE		should the program verbosely output what it is
				doing?
--no-act	NO_ACT		should the program not actually do anything?
-i,-a,-p,-N	DOPACKAGES	a space delimited list of the binary packages
				to act on (in Dh_Lib.pm, this is an array)
-i,-p,-N	DOINDEP		a space delimited list of the binary independent
				packages to act on
-a,-p,-N	DOARCH		a space delimited list of the binary dependent
				packages to act on
-n		NOSCRIPTS	if set, do not make any modifications to the 
				package's postinst, postrm, etc scripts.
-X		EXCLUDE		exclude a something from processing (you
				decide what this means for your program)
				(In Dh_Lib.pm, this is an array)
		EXCLUDE_GREP	same as DH_EXCLUDE, except all items are
				separated by '|' characters, instead of spaces,
				handy for egrep -v (only available to dh_lib)
                EXCLUDE_FIND	same as DH_EXCLUDE, except all items are put
				into a string in a way that they will make
				find find them. (Use ! in front to negate
				that, of course) (only available to dh_lib)
-x		INCLUDE_CONFFILES
				include conffiles. It's -x for obscure
				historical reasons.
-d		D_FLAG		you decide what this means to your program
-r		R_FLAG		you decide what this means to your program
-k		K_FLAG		you decide what this means to your program
-P		TMPDIR		package build directory (implies only one
				package is being acted on)
-u		U_PARAMS	will be set to a string, that is typically
				parameters your program passes on to some
				other program. (In Dh_Lib.pm, this is an array)
-m		M_PARAMS	will be set to a string, you decide what it
				means to your program
-V		V_FLAG		will be set to a string, you decide what it
				means to your program
-V		V_FLAG_SET	will be 1 if -V was specified, even if no
				parameters were passed along with the -V
-A		PARAMS_ALL	generally means that additional command line
				parameters passed to the program (other than
				those processed here), will apply to all 
				binary packages the program acts on, not just
				the first
--init-script	INIT_SCRIPT	will be set to a string, which specifies an
				init script name (probably only
				dh_installinit will ever use this)

Any additional command line parameters that do not start with "-" will be 
ignored, and you can access them later just as you normally would.

If you need a new command line option, just ask me, and I will add it.

Global variables:
----------------

If using dh_lib, the following variables are also set as soon as you load
the library:

MAINPACKAGE	the name of the first binary package listed in
		debian/control
DH_FIRSTPACKAGE	the first package we were instructed to act on. This package
		typically gets special treatment, additional arguments
		specified on the command line may effect it.

If using Dh_Lib.pm, these are only set after init(), and they are named
$dh{MAINPACKAGE} and $dh{FIRSTPACKAGE}, instead.

Functions:
---------

dh_lib/Dh_Lib.pm also contains a number of functions you may find useful.
Note that the functions calling conventions are slightly different between
the two versions of the library.

doit()
	Pass this function a string (dh_lib) or array (Dh_Lib.pm) that is a 
	shell command. It will run the command (unless DH_NO_ACT is set), and
	if DH_VERBOSE is set, it will also output the command to stdout. You
	should use this function for almost all commands your program performs
	that manipulate files in the package build directories.
complex_doit()
	Pass this function a string that is a shell command, it will run it
	similarly to how doit() does. You can pass more complicated commands 
	to this (ie, commands involving piping redirection)
verbose_echo()   (dh_lib)
verbose_print()  (Dh_Lib.pm)
	Pass this command a string, and it will echo it if DH_VERBOSE is set.
error()
	Pass this command a string, it will output it to standard error and
	exit.
warning()
	Pass this command a string, and it will output it to standard error
	as a warning message.
tmpdir()
	Pass this command the name of a binary package, it will return the
	name of the tmp directory that will be used as this package's
	package build directory. Typically, this will be "debian/tmp" or
	"debian/package".
pkgfile()
	Pass this command the name of a binary package, and the base name of a
	file, and it will return the actual filename to use. This is used
	for allowing debhelper programs to have configuration files in the
	debian/ directory, so there can be one config file per binary
	package. The convention is that the files are named
	debian/package.filename, and debian/filename is also allowable for
	the MAINPACKAGE. If the file does not exist, nothing is returned.
pkgext()
	Pass this command the name of a binary package, and it will return
	the name to prefix to files in debian/ for this package. For the
	MAINPACKAGE, it returns nothing (there is no prefix), for the other
	packages, it returns "package.".
isnative()
	Pass this command the name of a package, it returns 1 if the package
	is a native debian package.
	As a side effect, VERSION is set to the version number of the
	package.
autoscript()
	Pass parameters:
	 - package to be affected (Dh_Lib.pm only)
	 - script to add to
	 - filename of snippet
	 - sed commands to run on the snippet. Ie, s/#PACKAGE#/$PACKAGE/
	   (optional)
	This command automatically adds shell script snippets to a debian
	maintainer script (like the postinst or prerm).

-- Joey Hess <joeyh@master.debian.org>
